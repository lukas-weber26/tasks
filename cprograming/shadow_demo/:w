#include <GL/glew.h>
#include <GLFW/glfw3.h>
#include <alloca.h>
#include <stdbool.h>
#include <string.h>
#include <sys/mman.h>
#include <assert.h>
#include <sys/stat.h> 
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include "./camera.h"
#include "./program.h"

#define STB_IMAGE_IMPLEMENTATION
#include "stb_image.h"

typedef enum {TRIANGLE, PANE} shape;

int width = 1920, height = 1080;

void process_input(GLFWwindow * window) {
	if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS) {
		glfwSetWindowShouldClose(window, true);
	}
}

void window_resize_function(GLFWwindow * window, int w, int h) {
	width = w; 
	height = h;
	//glViewport(0, 0, w, h);
}

GLFWwindow * window_create() {
	glfwInit();
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 4);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 6);
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

	GLFWwindow * window = glfwCreateWindow(width, height, "test_window", NULL, NULL);
	assert(window);
	glfwMakeContextCurrent(window);
	glfwSetFramebufferSizeCallback(window, window_resize_function);
	glfwPollEvents();
	glViewport(0, 0, width, height);

	glewExperimental = true;
	glewInit();
	glPointSize(4);

	return window;
}

unsigned int get_pane_vao() {
	float data [] = {
	-1.0f,  1.0f,  0.0f, 1.0f,
        -1.0f, -1.0f,  0.0f, 0.0f,
         1.0f, -1.0f,  1.0f, 0.0f,

        -1.0f,  1.0f,  0.0f, 1.0f,
         1.0f, -1.0f,  1.0f, 0.0f,
         1.0f,  1.0f,  1.0f, 1.0f
	};	

	unsigned int VAO, VBO;

	glCreateVertexArrays(1, &VAO);
	glBindVertexArray(VAO);

	glCreateBuffers(1, &VBO);
	glBindBuffer(GL_ARRAY_BUFFER, VBO);
	glBufferData(GL_ARRAY_BUFFER, sizeof(data), data, GL_STATIC_DRAW);

	glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, sizeof(float)*4, (void *)(sizeof(float)*0));	
	glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, sizeof(float)*4, (void *)(sizeof(float)*2));	
	glEnableVertexAttribArray(0);	
	glEnableVertexAttribArray(1);	

	return VAO;
}

unsigned int get_texture() {
	unsigned int texture;
	glGenTextures(1, &texture);
	glActiveTexture(GL_TEXTURE0);
	glBindTexture(GL_TEXTURE_2D, texture);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

	stbi_set_flip_vertically_on_load(true);

	int w,h,c;	
	unsigned char * tex_data = stbi_load("../shadow_map/texture.jpg", &w, &h, &c,0);

	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, w, h, 0, GL_RGB, GL_UNSIGNED_BYTE, tex_data);
	glGenerateMipmap(GL_TEXTURE_2D);	
	stbi_image_free(tex_data);

	return texture;
}

int main() {
	GLFWwindow * window = window_create();

	unsigned int VAO = get_pane_vao();
	unsigned int texture = get_texture();
	
	program p = program_create();
	p = program_add_shader(p, "./vertex.glsl", GL_VERTEX_SHADER);
	p = program_add_shader(p, "./fragment.glsl", GL_FRAGMENT_SHADER);
	p = program_complte(p);
	program_bind(p);

	glBindTexture(GL_TEXTURE_2D, texture);
	unsigned int texture_loc = glGetUniformLocation(p.gl_program, "tex_image");
	glUniform1i(texture_loc, 0);

	while(!glfwWindowShouldClose(window)) {
		process_input(window);
		glClearColor(1.0, 1.0, 1.0, 1.0);	
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	
		glDrawArrays(GL_TRIANGLES, 0, 6);

		glfwSwapBuffers(window);
		glfwPollEvents();
	}

	glfwTerminate();
}
