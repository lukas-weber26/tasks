#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define INF 999999999
typedef enum {T = 0,R = 1,B = 2,L = 3} direction;

typedef struct cost {
	int x; 
	int y;
	int count;
	struct cost * next;
} cost;

cost * cost_create(int origin_x, int origin_y, int val) {
	cost * c = calloc(1, sizeof(cost));
	c->x = origin_x;
	c->y = origin_y;
	c->count = val;
	c->next = NULL;
	return c;
}

typedef struct maze {
	char ** data;
	cost ** costs;
	int x;
	int y;
	int y_max;
	int start_x;
	int start_y;
	int end_x;
	int end_y;
} maze;

maze * maze_create() {
	maze * new = calloc(1, sizeof(maze));
	new->x = 0;
	new->y = 0;
	new->y_max = 64;
	new->data = calloc(new->y_max, sizeof(char*));
	new->costs =NULL;
	return new;
}

void maze_push_line(maze * m, char * buff) {
	m->data[m->y++] = buff;
	if (m->y == m->y_max) {
		m->y_max *= 2;
		m->costs = realloc(m->costs, m->y_max*sizeof(char));
	}	
}

void maze_finalize(maze * m) {
	m->costs = calloc(m->x*m->y, sizeof(cost *));
	for (int y = 0; y < m->y; y++) {
		for (int x = 0; x < m->x; x++) {
			if (m->data[y][x] == 'S') {
				m->start_x = x;
				m->start_y = y;
				m->costs[x + y*m->x] = cost_create(x, y, 0);
			} else if (m->data[y][x] == 'E') {
				m->end_x = x;
				m->end_y = y;
			}
		}
	}		
}

int next_x(direction d, int x) {
	switch (d) {
		case T: return x;
		case B: return x;
		case R: return x+1;
		case L: return x-1;
		default: printf("Bad dir\n"); exit(0);
	}
}

int next_y(direction d, int y) {
	switch (d) {
		case T: return y-1;
		case B: return y+1;
		case R: return y;
		case L: return y;
		default: printf("Bad dir\n"); exit(0);
	}
}

char maze_get_data(maze * m, int x, int y) {
	if (x < 0 || y < 0) {
		return '\0';
	} else if (x >= m->x || y >= m->y) {
		return '\0';
	} else {
		return m->data[y][x];
	}
}

void maze_set_data(maze * m, int x, int y, char data) {
	if (x < 0 || y < 0) {
		return;
	} else if (x >= m->x || y >= m->y) {
		return;
	} else {
		m->data[y][x] = data;
	}
}

void maze_print_data(maze * m) {
	for (int y = 0; y < m->y; y++) {
		for (int x = 0; x < m->x; x++) {
			printf("%c", m->data[y][x]);
		}
		printf("\n");
	}		
	printf("\n");
}

int maze_get_cost_val(maze * m, int x, int y) {
	if (x < 0 || y < 0) {
		return INF;
	} else if (x >= m->x || y >= m->y) {
		return INF;
	} else {
		cost * c = m->costs[x + y * m->x];
		if (c != NULL) {
			return c->count;
		} else {
			return INF;
		}
	}
}

cost * maze_get_cost(maze * m, int x, int y) {
	if (x < 0 || y < 0) {
		return NULL;
	} else if (x >= m->x || y >= m->y) {
		return NULL;
	} else {
		cost * c = m->costs[x + y * m->x];
		return c;
	}
}

void maze_set_cost(maze * m, int x, int y, int val, int sx, int sy) {
	if (x < 0 || y < 0) {
		return;
	} else if (x >= m->x || y >= m->y) {
		return;
	} else {
		cost * new = cost_create(sx, sy, val);
		new->next = m->costs[x + y * m->x];
		m->costs[x + y * m->x] = new;
	}
}

void maze_print_cost(maze * m) {
	for (int y = 0; y < m->y; y++) {
		for (int x = 0; x < m->x; x++) {
			int c = maze_get_cost_val(m, x, y);
			int type = maze_get_data(m, x, y);
			if (c != INF && type == '#') {
				printf("XX ");	
			} else if (c != INF) {
				printf("%02d ", c);
			} else if (type == '#') {
				printf("## ");	
			} else {
				printf("-- ");	
			}
		}
		printf("\n");
	}		
	printf("\n");
}

maze * maze_from_file() {
	FILE * f = fopen("./input20.txt", "r");
	char * buff = NULL;
	unsigned long size;
	int len;
		
	maze * m = maze_create();	

	while ((len = getline(&buff, &size, f)) != -1) {
		if (m->x == 0) {
			m->x = len-1;
		}
		maze_push_line(m, buff);
		buff = NULL;
	}
	
	maze_finalize(m);
	fclose(f);
	return m;
}

bool step_to(maze * m, int prev_x, int prev_y, int next_x, int next_y, int prev_cost) {
	int cost = maze_get_cost_val(m, next_x, next_y);

	if (prev_cost < cost) {
		maze_set_cost(m, next_x, next_y, prev_cost, prev_x, prev_y);	
		return true;
	} else if (prev_cost == cost) {
		maze_set_cost(m, next_x, next_y, prev_cost, prev_x, prev_y);	
		return false;
	} else {
		return false;
	}
}

void step(maze * m, int cur_x, int cur_y) {
	int surrounding_x[4];
	int surrounding_y[4];
	char surrounding_chars[4];

	for (int i = 0; i < 4; i++) {
		surrounding_x[i] = next_x(i, cur_x);
		surrounding_y[i] = next_y(i, cur_y);
		surrounding_chars[i] = maze_get_data(m, surrounding_x[i], surrounding_y[i]);
	}

	int local_cost = maze_get_cost_val(m, cur_x, cur_y);

	for (int i = 0; i < 4; i++) {
		if (surrounding_chars[i] != '#' && surrounding_chars[i] != '\0') {
			if (step_to(m, cur_x, cur_y, surrounding_x[i], surrounding_y[i], local_cost + 1)) {
				step(m, surrounding_x[i], surrounding_y[i]);
			}
		}
	}
}

//don't think backtracking is necessary right now
int count_shortcuts(maze * m) {
	int * saves = calloc(1028, sizeof(int));
	for (int y = 0; y < m->y; y++) {
		for (int x = 0; x < m->x; x++) {
			int type = maze_get_data(m, x, y) ;
			if (type == 'E' || type == '.' || type == 'S') {

				//T = 0,R = 1,B = 2,L = 3
				//search for shortcuts
				char r = maze_get_data(m, next_x(R, x), next_y(R, y));
				char rr = maze_get_data(m, next_x(R,next_x(R, x)), next_y(R, next_y(R, y)));

				if (rr == '#' && r =='#') {

				} else if (r == '#')
				
				char d = maze_get_data(m, next_x(B, x), next_y(B, y));
				char dd = maze_get_data(m, next_x(B,next_x(B, x)), next_y(B, next_y(B, y)));
				//one down 

				//two down 

			}
		}
	}		
}

int main() {
	maze * m = maze_from_file();
	maze_print_data(m);
	maze_print_cost(m);
	step(m, m->start_x, m->start_y);
	maze_print_cost(m);
}
